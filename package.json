{
  "name": "livegrowfly",
  "version": "1.0.0",
  "description": "An AI-powered API deployed on Vercel",
  "main": "api/index.js",
  "type": "module",
  "engines": {
    "node": "18.x"
  },
  "scripts": {
    "start": "node api/index.js",
    "dev": "nodemon api/index.js",
    "build": "prisma generate",
    "vercel-build": "prisma generate"
  },
  "dependencies": {
    "@prisma/client": "^6.5.0",
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.2",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "openai": "^4.12.0",
    "prisma": "^6.5.0",
    "lru-cache": "^10.0.1",
    "glob": "^10.3.3",
    "rimraf": "^5.0.1"
  }
}
```
import express from "express";
import dotenv from "dotenv";
import OpenAI from "openai";
import { PrismaClient } from '@prisma/client';
import jwt from 'jsonwebtoken';

dotenv.config();
const app = express();
const prisma = new PrismaClient();

app.use(express.json());

const authenticateUser = async (req, res, next) => {
  try {
    const token = req.headers.authorization.split(" ")[1];
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await prisma.user.findUnique({
      where: { id: decoded.userId }
    });
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// Enhanced chat endpoint
app.post("/api/chat", authenticateUser, async (req, res) => {
  try {
    const { message } = req.body;
    
    // Check prompt limits
    const promptLimit = SUBSCRIPTION_LIMITS[req.user.subscriptionType];
    if (req.user.promptsUsed >= promptLimit) {
      return res.status(403).json({
        error: "Monthly prompt limit reached"
      });
    }

    // Your OpenAI logic here

    res.json({ response: "Your OpenAI response" });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default app;
````

{
  "version": 2,
  "builds": [
    {
      "src": "api/index.js",
      "use": "@vercel/node"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "api/index.js"
    }
  ]
}
